using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using TMPro;
using System.Xml;
using UnityEngine.TextCore.Text;

public class CharacterSelectionManager : MonoBehaviour
{
    GameManager gameManager;
    UnitManager unitManager;

    public List<Button> characterButtons; // 캐릭터 버튼들 (8명)
    public TMP_Text characterName;        // 캐릭터 이름

    public Button selectButton; // 선택 버튼
    public Button deselectButton; // 선택 해제 버튼 
    public Button cancelButton; // 취소 버튼 
    public GameObject confirmationUI; // 6명 선택 시 표시할 UI

    public Transform parentObject;
    TextMeshProUGUI textMeshPro;
    TMP_FontAsset maplestoryFont;

    GameObject statusText;
    GameObject storyText;
    GameObject passiveText;
    GameObject skill1Text;
    GameObject skill2Text;

    private List<string> selectedCharacters = new List<string>(); // 선택한 캐릭터 list 

    public List<string> SelectedCharacters
    {
        get { return selectedCharacters; }  // 리스트를 반환하는 getter

        set { selectedCharacters = value; }  // 리스트에 값을 설정하는 setter
    }
    

    void Start()
    {
        statusText = GameObject.Find("StatusText");
        storyText = GameObject.Find("StoryText");
        passiveText = GameObject.Find("PassiveText");
        skill1Text = GameObject.Find("Skill1Text");
        skill2Text = GameObject.Find("Skill2Text");

        gameManager = GameManager.Instance;
        unitManager = UnitManager.GetInstance();

        // 스파게티 코드... 추후 수정 예정
        maplestoryFont = Resources.Load<TMP_FontAsset>("Fonts/Maplestory OTF Bold SDF");
        unitManager.LoadBasicStatsFromJSON(); // JSON 데이터 로드

        List<string> keyList;
        if (gameManager.player1Camp == Player1Camp.Guwol)
            keyList = new List<string>(unitManager.guwol_basicStatsData.Keys);
        else if (gameManager.player1Camp == Player1Camp.Seo)
            keyList = new List<string>(unitManager.seo_basicStatsData.Keys);
        else
            keyList = null; // 없는 경우
        
        int n = 0;
        // 각 캐릭터 버튼에 캐릭터 이름 및 클릭 이벤트 추가
        foreach (Button characterButton in characterButtons)
        {
            Transform childTransform = characterButton.transform.Find("Text (TMP)");    // 이름 변경하면 안됨 !
            textMeshPro = childTransform.GetComponent<TextMeshProUGUI>();
            textMeshPro.font = maplestoryFont;
            textMeshPro.text = keyList[n++];

            characterButton.onClick.AddListener(() => OnCharacterButtonClick(characterButton));
        }

        // 선택 버튼 클릭 이벤트 추가
        selectButton.onClick.AddListener(OnSelectButtonClick);
        deselectButton.onClick.AddListener(OnDeselectButtonClick);
        cancelButton.onClick.AddListener(OnCancelButtonClick);
        // 초기화
        confirmationUI.SetActive(false);
        // UpdateSelectedCharactersText();
    }

    // 캐릭터 버튼 클릭 시 실행되는 함수
    void OnCharacterButtonClick(Button clickedButton)
    {
        string currentCharacterName = clickedButton.GetComponentInChildren<TMP_Text>().text;
        characterName.text = currentCharacterName;
        // Load selected character's status, skills, chracterImage

        Transform childTransform = clickedButton.transform.Find("Text (TMP)");
        string name = childTransform.GetComponent<TextMeshProUGUI>().text;
        if (gameManager.player1Camp == Player1Camp.Guwol)
        {
            skill1Text.GetComponent<TMP_Text>().font = maplestoryFont;
            skill1Text.GetComponent<TMP_Text>().text = unitManager.guwol_basicStatsData[name].skillName1;
            skill2Text.GetComponent<TMP_Text>().font = maplestoryFont;
            skill2Text.GetComponent<TMP_Text>().text = unitManager.guwol_basicStatsData[name].skillName2;

        }
        else if (gameManager.player1Camp == Player1Camp.Seo)
        {
             
        }

    }

    // 선택 버튼 클릭 시 실행되는 함수
    void OnSelectButtonClick()
    {
        // get current character name
        string currentCharacterName = characterName.text;
        if (!selectedCharacters.Contains(currentCharacterName))
        {
            selectedCharacters.Add(currentCharacterName);
                // Change the selected character's button UI
            Debug.Log($"{currentCharacterName} is selected.");
        }
        else
        {
            Debug.Log("Already selected");
        }
        if (selectedCharacters.Count == 6)
        {
            // 6명이 선택되었으면 확인 UI 표시
            confirmationUI.SetActive(true);
        }
        else
        {
            Debug.Log($"Select 6 characters (now: {selectedCharacters.Count})");
        }
    }

    // 해제 버튼 클릭 시 실행되는 함수
    void OnDeselectButtonClick()
    {
        selectedCharacters.Remove(characterName.text);
    }
   
    void OnCancelButtonClick()
    {
        string currentCharacterName = characterName.text;
        selectedCharacters.Remove(currentCharacterName);
            // 가장 최근에 선택한 캐릭터의 버튼 색을 원래대로 
        confirmationUI.SetActive(false);
    }
}
